{"file":"admin-bewerbung-CSQLoFV1.js","mappings":";;;;;;;;;;;;;;;;;;;;AAkEA,UAAM,SAAS,iBAAkB;AAGjC,UAAM,WAAW,aAAa,OAAO,OAAO,aAAa,OAAO,OAAO,eAAe;AAGtF,UAAM,aAAa,IAAI,KAAK;AAE5B,UAAM,cAAc,IAAI,EAAE;AAY1B,aAAS,qBAAqB;AAC5B,iBAAW,QAAQ;AACnB,sBAAiB;AAAA,IACnB;AAGA,UAAM,kBAAkB,YAAY;AAClC,YAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAAS,KAAK,aAAa,EAAE,OAAO,GAAG;AACrE,UAAI,CAAC,OAAO;AACV,oBAAY,QAAQ;AAAA,MACxB,OAAS;AACL,gBAAQ,MAAM,sCAAsC,KAAK;AAAA,MAC1D;AAAA,IACH;AAGA,UAAM,SAAS,YAAY;AACzB,YAAM,SAAS,KAAK,QAAS;AAC7B,iBAAW,QAAQ;AAAA,IACrB;;;WAhGuB,WAAU,OAAA;AAAG,cAAAA,mBAAA,YAAA,EAAA,gBAAe,mBAAkB,GAAA,MAAA,OAAA,CAAA;AAAA;;AAIpD,cAAAA,mBAAA,UAAA,EAAA,UAAQ,OAAM,GAAA,MAAA,OAAA,CAAA;;AAkBLC,sBAAA,YAAA,QAAL,MAAC;2DACHC,eAAA,EAAE,OAAO,KAAOA,eAAA,EAAE,QAAQ,6BAC1BA,eAAA,EAAE,KAAK,6BACPA,eAAA,EAAE,WAAW;AAGT,cAAA,EAAE,eAAa;qCAAG,QAAM,EAAE,aAAa,CAAA,iDAAA;AAAA;;;4CAG3CA,eAAA,EAAE,SAAS,wFAGCC,sBAAA,MAAA,QAAA,EAAE,MAAM,IAARC,gBAAA,EAAE,QAAM,KAAA,IAARC,cAAA,EAAE,QAAM,KAAA,CAAA,IAAA,cAAA,4DAARF,sBAAA,MAAA,QAAA,EAAE,MAAM,IAARC,gBAAA,EAAE,QAAM,YAAA,IAARC,cAAA,EAAE,QAAM,YAAA,CAAA,IAAA,cAAA,kEAARF,sBAAA,MAAA,QAAA,EAAE,MAAM,IAARC,gBAAA,EAAE,QAAM,WAAA,IAARC,cAAA,EAAE,QAAM,WAAA,CAAA,IAAA,cAAA;;;;;;;;;;;;;;;","names":["_ssrRenderComponent","_ssrRenderList","_ssrInterpolate","_ssrIncludeBooleanAttr","_ssrLooseContain","_ssrLooseEqual"],"sources":["../../../../pages/admin-bewerbung.vue"],"sourcesContent":["<!--\r\n  Hinweis zur KI-Nutzung:\r\n  Die Tabellenstruktur und die Logik zur Bearbeitung von Bewerbungen basieren auf Vorschlägen von ChatGPT.\r\n  Darstellung, Statusvergabe und Datenanbindung wurden angepasst und auf das Projekt abgestimmt.\r\n-->\r\n\r\n<template>\r\n  <div>\r\n    <!-- Login-Komponente anzeigen, wenn nicht eingeloggt -->\r\n    <AdminLogin v-if=\"!isLoggedIn\" @login-success=\"handleLoginSuccess\" />\r\n\r\n    <!-- Admin-Bereich nach Login -->\r\n    <div v-else>\r\n      <AdminNav @logout=\"logout\" />\r\n\r\n      <h2 class=\"section-title\">Eingegangene Bewerbungen</h2>\r\n\r\n      <table class=\"admin-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Studiengang</th>\r\n            <th>Zeugnis</th>\r\n            <th>Nachricht</th>\r\n            <th>Status</th>\r\n            <th>Aktionen</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- Bewerbungen durchlaufen -->\r\n          <tr v-for=\"b in bewerbungen\" :key=\"b.id\">\r\n            <td>{{ b.Vorname }} {{ b.nachname }}</td>\r\n            <td>{{ b.email }}</td>\r\n            <td>{{ b.studiengang }}</td>\r\n            <td>\r\n              <!-- PDF Link nur anzeigen wenn vorhanden -->\r\n              <a v-if=\"b.Zeugnisse_url\" :href=\"b.Zeugnisse_url\" target=\"_blank\">PDF öffnen</a>\r\n              <span v-else>-</span>\r\n            </td>\r\n            <td>{{ b.Nachricht }}</td>\r\n            <td>\r\n              <!-- Status Auswahl mit Update-Funktion -->\r\n              <select v-model=\"b.status\" @change=\"updateStatus(b.id, b.status)\">\r\n                <option value=\"neu\">neu</option>\r\n                <option value=\"angenommen\">angenommen</option>\r\n                <option value=\"abgelehnt\">abgelehnt</option>\r\n              </select>\r\n            </td>\r\n            <td>\r\n              <button @click=\"loescheEintrag(b.id)\" class=\"btn-delete\">Löschen</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport AdminLogin from '~/components/AdminLogin.vue'\r\nimport AdminNav from '~/components/AdminNav.vue'\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { useRuntimeConfig } from '#app'\r\n\r\nconst config = useRuntimeConfig()\r\n\r\n// Supabase Client initialisieren\r\nconst supabase = createClient(config.public.supabaseUrl, config.public.supabaseAnonKey)\r\n\r\n// Login Status\r\nconst isLoggedIn = ref(false)\r\n// Bewerbungs-Daten\r\nconst bewerbungen = ref([])\r\n\r\n// Prüfen bei Mount, ob Session existiert, dann Bewerbungen laden\r\nonMounted(async () => {\r\n  const { data: { session } } = await supabase.auth.getSession()\r\n  isLoggedIn.value = !!session\r\n  if (isLoggedIn.value) {\r\n    ladeBewerbungen()\r\n  }\r\n})\r\n\r\n// Event Callback nach erfolgreichem Login\r\nfunction handleLoginSuccess() {\r\n  isLoggedIn.value = true\r\n  ladeBewerbungen()\r\n}\r\n\r\n// Bewerbungen aus der DB laden\r\nconst ladeBewerbungen = async () => {\r\n  const { data, error } = await supabase.from('bewerbungen').select('*')\r\n  if (!error) {\r\n    bewerbungen.value = data\r\n  } else {\r\n    console.error('Fehler beim Laden der Bewerbungen:', error)\r\n  }\r\n}\r\n\r\n// Logout-Funktion\r\nconst logout = async () => {\r\n  await supabase.auth.signOut()\r\n  isLoggedIn.value = false\r\n}\r\n\r\n// Status der Bewerbung aktualisieren\r\nconst updateStatus = async (id, neuerStatus) => {\r\n  const { error } = await supabase\r\n    .from('bewerbungen')\r\n    .update({ status: neuerStatus })\r\n    .eq('id', id)\r\n\r\n  if (error) {\r\n    alert('Fehler beim Aktualisieren des Status')\r\n    return\r\n  }\r\n\r\n  // Wenn Status \"angenommen\", E-Mail versenden\r\n  if (neuerStatus === 'angenommen') {\r\n    const { data, error: fetchError } = await supabase\r\n      .from('bewerbungen')\r\n      .select('email, Vorname')\r\n      .eq('id', id)\r\n      .single()\r\n\r\n    if (fetchError) {\r\n      console.error('Fehler beim Laden der Bewerbung:', fetchError)\r\n      return\r\n    }\r\n\r\n    // Mail via API senden\r\n    const sendMailResponse = await fetch('/api/send-mail', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        to: data.email,\r\n        subject: 'Zusage für deinen Studienplatz an der FH Kiel',\r\n        text: `Hallo ${data.Vorname},\\n\\nherzlichen Glückwunsch! Deine Bewerbung wurde angenommen. Wir freuen uns, dich an der FH Kiel begrüßen zu dürfen.\\n\\nBeste Grüße\\nDein FH Kiel Team`,\r\n        html: `<p>Hallo ${data.Vorname},</p><p>herzlichen Glückwunsch! Deine Bewerbung wurde angenommen. Wir freuen uns, dich an der FH Kiel begrüßen zu dürfen.</p><p>Beste Grüße<br/>Dein FH Kiel Team</p>`\r\n      })\r\n    })\r\n\r\n    if (!sendMailResponse.ok) {\r\n      console.error('Fehler beim Versenden der Email')\r\n    }\r\n  }\r\n}\r\n\r\n// Bewerbungseintrag löschen\r\nconst loescheEintrag = async (id) => {\r\n  if (!confirm('Eintrag wirklich löschen?')) return\r\n\r\n  const { error } = await supabase\r\n    .from('bewerbungen')\r\n    .delete()\r\n    .eq('id', id)\r\n\r\n  if (!error) {\r\n    // Lokal im Array entfernen\r\n    bewerbungen.value = bewerbungen.value.filter(b => b.id !== id)\r\n  } else {\r\n    alert('Fehler beim Löschen')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.admin-table {\r\n  width: 95%;\r\n  margin: 40px auto;\r\n  border-collapse: collapse;\r\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n}\r\n.admin-table th, .admin-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 14px 16px;\r\n  max-width: 150px;\r\n  word-wrap: break-word;\r\n}\r\n.admin-table th {\r\n  background-color: #003366;\r\n  color: white;\r\n}\r\n.btn-delete {\r\n  background: red;\r\n  color: white;\r\n  border: none;\r\n  padding: 6px 12px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n}\r\n.logout-btn {\r\n  margin: 20px;\r\n  background: #888;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n}\r\n.admin-nav {\r\n  margin: 20px 40px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n.nav-link {\r\n  color: #003366;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n}\r\n.nav-link.router-link-exact-active {\r\n  text-decoration: underline;\r\n}\r\n.section-title {\r\n  text-align: center;\r\n  margin-top: 40px;\r\n  color: #003366;\r\n}\r\n</style>\r\n"],"version":3}