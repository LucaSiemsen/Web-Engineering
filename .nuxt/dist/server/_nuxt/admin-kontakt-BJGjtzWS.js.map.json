{"file":"admin-kontakt-BJGjtzWS.js","mappings":";;;;;;;;;;;;;;;;;;AAwDA,UAAM,SAAS,iBAAkB;AAEjC,UAAM,WAAW,aAAa,OAAO,OAAO,aAAa,OAAO,OAAO,eAAe;AAGtF,UAAM,aAAa,IAAI,KAAK;AAE5B,UAAM,WAAW,IAAI,EAAE;AAYvB,aAAS,qBAAqB;AAC5B,iBAAW,QAAQ;AACnB,mBAAc;AAAA,IAChB;AAGA,UAAM,eAAe,YAAY;AAC/B,YAAM,EAAE,MAAM,MAAK,IAAK,MAAM,SAAS,KAAK,UAAU,EAAE,OAAO,GAAG;AAClE,UAAI,CAAC,OAAO;AACV,iBAAS,QAAQ;AAAA,MACrB,OAAS;AACL,gBAAQ,MAAM,mCAAmC,KAAK;AAAA,MACvD;AAAA,IACH;AAGA,UAAM,SAAS,YAAY;AACzB,YAAM,SAAS,KAAK,QAAS;AAC7B,iBAAW,QAAQ;AAAA,IACrB;;;WArFuB,WAAU,OAAA;AAAG,cAAAA,mBAAA,YAAA,EAAA,gBAAe,mBAAkB,GAAA,MAAA,OAAA,CAAA;AAAA;;AAIpD,cAAAA,mBAAA,UAAA,EAAA,UAAQ,OAAM,GAAA,MAAA,OAAA,CAAA;;AAiBLC,sBAAA,SAAA,QAAL,MAAC;2DACHC,eAAA,EAAE,IAAI,6BACNA,eAAA,EAAE,KAAK,6BACPA,eAAA,EAAE,WAAO,GAAA,6BACTA,eAAA,EAAE,OAAO,6BACTA,eAAA,EAAE,SAAS;;;;;;;;;;;;;;;","names":["_ssrRenderComponent","_ssrRenderList","_ssrInterpolate"],"sources":["../../../../pages/admin-kontakt.vue"],"sourcesContent":["<!--\r\n  Hinweis zur KI-Nutzung:\r\n  Die Darstellung und Verarbeitung der Kontaktanfragen wurde mit Unterstützung von ChatGPT umgesetzt.\r\n  Die Supabase-Abfragen und UI-Komponenten wurden anschließend individuell angepasst.\r\n  (erstellt und angepasst im Juni 2025)\r\n-->\r\n<template>\r\n  <div>\r\n    <!-- Login-Komponente anzeigen, falls nicht eingeloggt -->\r\n    <AdminLogin v-if=\"!isLoggedIn\" @login-success=\"handleLoginSuccess\" />\r\n\r\n    <!-- Admin-Bereich, wenn eingeloggt -->\r\n    <div v-else>\r\n      <AdminNav @logout=\"logout\" />\r\n\r\n      <h2 class=\"section-title\">Kontaktanfragen</h2>\r\n\r\n      <table class=\"admin-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Telefon</th>\r\n            <th>Betreff</th>\r\n            <th>Nachricht</th>\r\n            <th>Aktionen</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- Kontakte iterieren -->\r\n          <tr v-for=\"k in kontakte\" :key=\"k.id\">\r\n            <td>{{ k.name }}</td>\r\n            <td>{{ k.email }}</td>\r\n            <td>{{ k.telefon || '-' }}</td>\r\n            <td>{{ k.betreff }}</td>\r\n            <td>{{ k.nachricht }}</td>\r\n            <td>\r\n              <button @click=\"loescheEintrag(k.id)\" class=\"btn-delete\">Löschen</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// Vue Hooks & Funktionen importieren\r\nimport { ref, onMounted } from 'vue'\r\n// Admin-Komponenten importieren\r\nimport AdminLogin from '~/components/AdminLogin.vue'\r\nimport AdminNav from '~/components/AdminNav.vue'\r\n// Supabase Client importieren\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\n// Zugriff auf Umgebungsvariablen\r\nconst config = useRuntimeConfig()\r\n// Supabase Client mit Public Anon Key initialisieren\r\nconst supabase = createClient(config.public.supabaseUrl, config.public.supabaseAnonKey)\r\n\r\n// Status, ob User eingeloggt ist\r\nconst isLoggedIn = ref(false)\r\n// Array für Kontaktanfragen\r\nconst kontakte = ref([])\r\n\r\n// Beim Laden prüfen, ob Session existiert und Kontakte laden\r\nonMounted(async () => {\r\n  const { data: { session } } = await supabase.auth.getSession()\r\n  isLoggedIn.value = !!session\r\n  if (isLoggedIn.value) {\r\n    ladeKontakte()\r\n  }\r\n})\r\n\r\n// Callback wenn Login erfolgreich war\r\nfunction handleLoginSuccess() {\r\n  isLoggedIn.value = true\r\n  ladeKontakte()\r\n}\r\n\r\n// Kontakte aus Supabase laden\r\nconst ladeKontakte = async () => {\r\n  const { data, error } = await supabase.from('kontakte').select('*')\r\n  if (!error) {\r\n    kontakte.value = data\r\n  } else {\r\n    console.error('Fehler beim Laden der Kontakte:', error)\r\n  }\r\n}\r\n\r\n// Logout Funktion\r\nconst logout = async () => {\r\n  await supabase.auth.signOut()\r\n  isLoggedIn.value = false\r\n}\r\n\r\n// Eintrag löschen mit Bestätigung\r\nconst loescheEintrag = async (id) => {\r\n  if (!confirm('Eintrag wirklich löschen?')) return\r\n\r\n  const { error } = await supabase.from('kontakte').delete().eq('id', id)\r\n  if (!error) {\r\n    // Lokal entfernen, damit UI aktualisiert wird\r\n    kontakte.value = kontakte.value.filter(k => k.id !== id)\r\n  } else {\r\n    alert('Fehler beim Löschen')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Tabelle und Layout */\r\n.admin-table {\r\n  width: 95%;\r\n  margin: 40px auto;\r\n  border-collapse: collapse;\r\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n}\r\n.admin-table th, .admin-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 14px 16px;\r\n  max-width: 150px;\r\n  word-wrap: break-word;\r\n}\r\n.admin-table th {\r\n  background-color: #003366;\r\n  color: white;\r\n}\r\n\r\n/* Löschen-Button */\r\n.btn-delete {\r\n  background: red;\r\n  color: white;\r\n  border: none;\r\n  padding: 6px 12px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Logout Button (im AdminNav) */\r\n.logout-btn {\r\n  margin: 20px;\r\n  background: #888;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Navigation */\r\n.admin-nav {\r\n  margin: 20px 40px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n.nav-link {\r\n  color: #003366;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n}\r\n.nav-link.router-link-exact-active {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Überschrift */\r\n.section-title {\r\n  text-align: center;\r\n  margin-top: 40px;\r\n  color: #003366;\r\n}\r\n</style>\r\n"],"version":3}